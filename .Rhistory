geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
mca$eig
library('FactoMineR')
library('ggplot2')
maxCA = function(tableName) {
# Open the file
pathToFile = paste('data', tableName, sep = '/')
data = read.csv(pathToFile, head = TRUE)
# Take the first column as the index
rownames(data) = data[,1]
data[,1] = NULL
# Calculate the CA
ca = CA(data, graph = FALSE)
# Extract the cartesian coordinates of the CA for both variables
obs1 = data.frame(ca$col$coord)
obs2 = data.frame(ca$row$coord)
# Plot the two first columns (contains most information)
ggplot() +
geom_text(data = obs1, aes(Dim.1, Dim.2), label = rownames(obs1), col = 'purple', hjust = 0, vjust = 0) +
geom_point(data = obs1, aes(Dim.1, Dim.2), col = 'purple') +
geom_text(data = obs2, aes(Dim.1, Dim.2), label = rownames(obs2), col = 'darkgreen', hjust = 0, vjust = 0) +
geom_point(data = obs2, aes(Dim.1, Dim.2), col = 'darkgreen') +
geom_hline(yintercept = 0, col = 'gray') +
geom_vline(xintercept = 0, col = 'gray') +
ggtitle(tableName)
ggsave(file = paste('images', paste(tableName, 'png', sep = '.'), sep = '/'))
return (ca)
}
# CA : Genre of a film vs. age of a user
F_genreVSage = maxCA('F_genreVSage')
M_genreVSage = maxCA('M_genreVSage')
# CA : Genre of a film vs. occupation of a user
F_genreVSoccupation = maxCA('F_genreVSoccupation')
library('FactoMineR')
library('ggplot2')
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
#data = data[c('genre', 'occupation', 'ageCategory')]
# Randomly sample the data (an MCA is a heavy calculation)
#data = data[sample(nrow(data), 4000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
mca$call
mca$ind
mca$var
mca$eig
dimdesc(mca)
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
#data = data[c('genre', 'occupation', 'ageCategory')]
# Randomly sample the data (an MCA is a heavy calculation)
data = data[sample(nrow(data), 7000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
dimdesc(mca)
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (an MCA is a heavy calculation)
data = data[sample(nrow(data), 7000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (an MCA is a heavy calculation)
#data = data[sample(nrow(data), 7000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (an MCA is a heavy calculation)
data = data[sample(nrow(data), 7000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
HCPC(mca)
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (an MCA is a heavy calculation)
data = data[sample(nrow(data), 4000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# Classification
HCPC(mca)
library('FactoMineR')
library('ggplot2')
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
data = data[sample(nrow(data), 5000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# Classification
hcpc = HCPC(mca)
hcpc$desc.var$category
hcpc$desc.var$test.chi2
library('FactoMineR')
library('ggplot2')
maxCA = function(tableName) {
# Open the file
pathToFile = paste('data', tableName, sep = '/')
data = read.csv(pathToFile, head = TRUE)
# Take the first column as the index
rownames(data) = data[,1]
data[,1] = NULL
# Calculate the CA
ca = CA(data, graph = FALSE)
# Extract the cartesian coordinates of the CA for both variables
obs1 = data.frame(ca$col$coord)
obs2 = data.frame(ca$row$coord)
# Plot the two first columns (contains most information)
ggplot() +
geom_text(data = obs1, aes(Dim.1, Dim.2), label = rownames(obs1), col = 'purple', hjust = 0, vjust = 0) +
geom_point(data = obs1, aes(Dim.1, Dim.2), col = 'purple') +
geom_text(data = obs2, aes(Dim.1, Dim.2), label = rownames(obs2), col = 'darkgreen', hjust = 0, vjust = 0) +
geom_point(data = obs2, aes(Dim.1, Dim.2), col = 'darkgreen') +
geom_hline(yintercept = 0, col = 'gray') +
geom_vline(xintercept = 0, col = 'gray') +
ggtitle(tableName)
ggsave(file = paste('images', paste(tableName, 'png', sep = '.'), sep = '/'))
return (ca)
}
F_genreVSoccupation = maxCA('F_genreVSoccupation')
F_genreVSoccupation$row$contrib
F_genreVSoccupation$col$contrib
F_genreVSoccupation$eig
hcpc$desc.var$category
mca = MCA(data, ncp=20, graph = FALSE)
hcpc = HCPC(mca)
mca = MCA(data, ncp=40, graph = FALSE)
hcpc = HCPC(mca)
hcpc$desc.var$test.chi2
hcpc$desc.var$category
hcpc$data.clust
hcpc$desc.axes$quanti
hcpc$call
hcpc$call$call
hcpc$desc.ind$para
hcpc$desc.ind$dist
hcpc$desc.ind$para
library('FactoMineR')
library('ggplot2')
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
#data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (HCPC is a heavy calculation)
data = data[sample(nrow(data), 5000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# Classification
mca = MCA(data, ncp=40, graph = FALSE)
hcpc = HCPC(mca)
hcpc$desc.var$category
hcpc$desc.var
hcpc$desc.var$category
library('FactoMineR')
library('ggplot2')
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
#data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (HCPC is a heavy calculation)
data = data[sample(nrow(data), 5000),]
mca = MCA(data, ncp=40, graph = FALSE)
hcpc = HCPC(mca)
hcpc$desc.ind$para
hcpc$desc.ind$dist
hcpc$data.clust$gender
hcpc$desc.var$test.chi2
hcpc$desc.var$category
hcpc$desc.axes$quanti.var
hcpc$desc.axes$quanti
hcpc$call$t
hcpc$call$min
hcpc$call$max
hcpc$call$t
hcpc$call$t$res
hcpc$call$t$tree
hcpc$call$t$nb.clust
hcpc$call$t$within
hcpc$call$t$inert.gain
hcpc$call$t$quot
hcpc$call$t$res
hcpc$call$min
hcpc$call$X$Dim 6
hcpc$call$bw.before.consol
hcpc$call$call
hcpc$call$vec
hcpc$call$t$tree
hcpc$call$t$tree$labels
hcpc$call$t$tree$height
hcpc$call$t$tree$merge
hcpc$call$t$tree$order
hcpc$call$t$tree$labels
hcpc$call$t$tree$method
hcpc$call$t$tree$dist.method
hcpc$call$t$nb.clust
hcpc$call$t$tree
hcpc$call$t$nb.clust
hcpc$desc.var
hcpc$desc.axes$quanti$1
hcpc$desc.axes$quanti$2
hcpc$desc.axes$quanti$'2'
hcpc$desc.axes$quanti.var$'2'
hcpc$desc.axes$quanti.var
hclust(mca)
?hclust
hcpc$desc.var$category
hcpc$desc.ind$para
hcpc$desc.ind$para$1
hcpc$desc.ind$para$'1'
hcpc$desc.ind$para$'1'
hcpc = HCPC(mca, conso=0)
?HCPC
hcpc = HCPC(mca, kk=10)
hcpc = HCPC(mca)
hcpc$desc.ind$para
hcpc$desc.var$test.chi2
hcpc$desc.var$category
hcpc$data.clust
hcpc$data.clust$gender
hcpc$data.clust$occupation
hcpc$data.clust$clust
hcpc$data.clust$clust
hcpc$desc.var$test.chi2
hcpc$desc.ind$para
hcpc$desc.var$category
data = data[sample(nrow(data), 5000),]
library('FactoMineR')
library('ggplot2')
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
#data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (HCPC is a heavy calculation)
data = data[sample(nrow(data), 5000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)pc
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# Classification
mca = MCA(data, ncp=40, graph = FALSE)
hcpc = HCPC(mca)
hcpc$desc.var$test.chi2
library('FactoMineR')
library('ggplot2')
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
#data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (HCPC is a heavy calculation)
data = data[sample(nrow(data), 5000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# Classification
mca = MCA(data, ncp=40, graph = FALSE)
hcpc = HCPC(mca)
hcpc$desc.var$test.chi2
library('FactoMineR')
library('ggplot2')
# MCA on all the data
data = read.csv('data/mca', head = TRUE)
# Select only a few variables
#data = data[c('gender', 'region', 'ageCategory')]
# Randomly sample the data (HCPC is a heavy calculation)
data = data[sample(nrow(data), 5000),]
# Extract each category with the size of its space
categories = apply(data, 2, function(x) nlevels(as.factor(x)))
# Compute the MCA
mca = MCA(data, graph = FALSE)
# Extract variables coordinates
variables = data.frame(mca$var$coord, Variable = rep(names(categories), categories))
# Extract observations coordinates
observations = data.frame(mca$ind$coord)
# Plot!
ggplot(observations,  aes(Dim.1, Dim.2)) +
geom_hline(yintercept = 0, colour = "gray") +
geom_vline(xintercept = 0, colour = "gray") +
geom_point(colour = 'gray50', alpha = 0.7) +
geom_density2d(colour = 'gray80') +
#geom_text(data = variables, aes(Dim.1, Dim.2, label = rownames(variables), colour = Variable)) +
ggtitle("MCA plot")
# Classification
mca = MCA(data, ncp=40, graph = FALSE)
hcpc = HCPC(mca)
hcpc$data.clust$clust
hcpc$desc.var$test.chi2
hcpc$desc.var$category
hcpc$desc.ind$para
hcpc$desc.var$category
hcpc$data.clust$clust
length(hcpc$data.clust$clust)
table(hcpc$data.clust$clust)
hcpc$desc.var$category
hcpc$desc.ind$para
library(vegan)
library(plot3D)
# Indiquer où se trouve les données
path = "/home/max/Dropbox/Courses/L3/Etudes de Cas Statistiques/Cochlées/data/"
# Obtenir les fichiers pour les hommes et les femmes
maleFiles = list.files(paste(path, 'male/', sep = '') , pattern = "*.am", full.names = TRUE)
femaleFiles = list.files(paste(path, 'female/', sep = '') , pattern = "*.am", full.names = TRUE)
# Lire les données
male = lapply(maleFiles, read.table, col.names=list('x','y','z'))
female = lapply(femaleFiles, read.table, col.names=list('x','y','z'))
#scatter3D(nData[[1]][[1]][,1], nData[[1]][[1]][,2], nData[[1]][[1]][,3])
# On calcule les distances entre chaque points ((1000*999)/2)
distM = vector('list', length(male))
for (i in 1:length(distM))
distM[[i]] = as.matrix(dist(male[[i]]))
distF = vector('list', length(female))
for (i in 1:length(distF))
distF[[i]] = as.matrix(dist(female[[i]]))
# Normaliser les données
for (i in 1:12)
distM[[i]] = distM[[i]] / sum(diag(distM[[i]][-1000, -1]))
for (i in 1:10)
distF[[i]] = distF[[i]] / sum(diag(distF[[i]][-1000, -1]))
# On cherche la distance moyenne pour chaque sexe
DM = matrix(0, 1000, 1000)
for (i in 1:length(distM))
DM = DM + distM[[i]]
DM = DM / 12
DF = matrix(0, 1000, 1000)
for (i in 1:length(distF))
DF = DF + distF[[i]]
DF = DF / 10
# On peut visualiser les écarts de distance
difference = DM - DF
par(mfrow = c(1, 2))
image(difference)
library(vegan)
library(plot3D)
# Indiquer où se trouve les données
path = "/home/max/Dropbox/Courses/L3/Etudes de Cas Statistiques/Cochlées/data/"
# Obtenir les fichiers pour les hommes et les femmes
maleFiles = list.files(paste(path, 'male/', sep = '') , pattern = "*.am", full.names = TRUE)
femaleFiles = list.files(paste(path, 'female/', sep = '') , pattern = "*.am", full.names = TRUE)
# Lire les données
male = lapply(maleFiles, read.table, col.names=list('x','y','z'))
female = lapply(femaleFiles, read.table, col.names=list('x','y','z'))
#scatter3D(nData[[1]][[1]][,1], nData[[1]][[1]][,2], nData[[1]][[1]][,3])
# On calcule les distances entre chaque points ((1000*999)/2)
distM = vector('list', length(male))
for (i in 1:length(distM))
distM[[i]] = as.matrix(dist(male[[i]]))
distF = vector('list', length(female))
for (i in 1:length(distF))
distF[[i]] = as.matrix(dist(female[[i]]))
# On cherche la distance moyenne pour chaque sexe
DM = matrix(0, 1000, 1000)
for (i in 1:length(distM))
DM = DM + distM[[i]]
DM = DM / 12
DF = matrix(0, 1000, 1000)
for (i in 1:length(distF))
DF = DF + distF[[i]]
DF = DF / 10
# On peut visualiser les écarts de distance
difference = DM - DF
par(mfrow = c(1, 2))
image(difference)
